name: build and test
on:
  workflow_call:
    inputs:
      arch:
        type: string
        default: "64"
      compiler:
        type: string
        default: "gcc"
      coverage:
        type: string
        default: "OFF"
      lib_msg_delivery:
        type: string
        default: "OFF"
      lib_write_deadline:
        type: string
        default: "OFF"
      name:
        type: string
        description: "name of the build"
        default: "build"
      quick_test:
        type: string
        default: "OFF"
      sanitize:
        type: string
        description: "sanitize option to use, 'address' or 'thread'"
      server_version:
        type: string
        description: "nats-server version to test with"
        default: "latest"
      streaming:
        type: string
        default: "ON"
      tls:
        type: string
        default: "ON"
      type:
        type: string
        description: "Debug or Release."
        default: "Release"
      ubuntu_version:
        type: string
        description: "Ubuntu version to use, e.g. '20.04'"
        default: "latest"
      use_cache_key:
        type: string
        description: "Use cache key to speed up build"
    secrets:
      COVERALLS_REPO_TOKEN:
        description: "Coveralls repo token"
      CODECOV_TOKEN:
        description: "Codecov repo token"

permissions:
  contents: write # so it can comment

defaults:
  run:
    shell: bash --noprofile --norc -x -eo pipefail {0}

jobs:
  build-test:
    runs-on: ubuntu-${{ inputs.ubuntu_version }}
    name: ${{ inputs.name }}
    steps:
      - name: Checkout nats.c
        uses: actions/checkout@v3

      - name: "Checkout dependencies (nats.c.deps)"
        uses: actions/checkout@v3
        with:
          repository: nats-io/nats.c.deps
          path: deps

      # configure the cmake flags and NATS_... environment variables
      - id: cmake-flags
        name: Configure cmake flags
        env:
          flags: -DNATS_BUILD_ARCH=${{ inputs.arch }}
            -DCMAKE_BUILD_TYPE=${{ inputs.type }}
            -DNATS_BUILD_STREAMING=${{ inputs.streaming }}
            -DNATS_BUILD_WITH_TLS=${{ inputs.tls }}
            -DNATS_PROTOBUF_DIR=${{ github.workspace}}/deps/pbuf
            -DNATS_BUILD_USE_SODIUM=ON
            -DNATS_SODIUM_DIR=${{ github.workspace}}/deps/sodium
        run: |
          CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -Werror"
          if [[ -n "${{ inputs.sanitize }}" ]]; then
            flags="$flags -DNATS_SANITIZE=ON -DCMAKE_C_FLAGS='${CMAKE_C_FLAGS} -fsanitize=${{ inputs.sanitize }}'"
          fi
          if [[ "${{ inputs.coverage }}" == "ON" ]]; then
            flags="$flags -DNATS_COVERAGE=ON"
          fi
          echo "flags=$flags" >> $GITHUB_OUTPUT

      - id: nats-vars
        name: Configure NATS environment variables
        run: |
          if [[ -n "${{ inputs.sanitize }}" ]]; then
            echo "NATS_TEST_VALGRIND=yes" >> $GITHUB_ENV
            echo "NATS_SANITIZE=ON" >> $GITHUB_ENV
          fi
          if [[ "${{ inputs.lib_msg_delivery }}" == "ON" ]]; then
            echo "NATS_DEFAULT_TO_LIB_MSG_DELIVERY=yes" >> $GITHUB_ENV
          fi
          if [[ "${{ inputs.lib_write_deadline }}" == "ON" ]]; then
            echo "NATS_DEFAULT_LIB_WRITE_DEADLINE=2000" >> $GITHUB_ENV
          fi
          echo "CC=${{ inputs.compiler }}" >> $GITHUB_ENV

      # install build dependencies
      - name: Install ${{ inputs.compiler }} if needed
        if: startsWith(inputs.compiler, 'clang-') || startsWith(inputs.compiler, 'gcc-')
        run: |
          sudo apt-get -q update
          sudo apt-get -y install ${{ inputs.compiler }}

      - name: Download previous build
        id: download-prior-build
        if: inputs.use_cache_key
        continue-on-error: true
        uses: actions/cache/restore@v3
        with:
          path: build
          key: ${{ inputs.use_cache_key }}

      # otherwise, configure cmake, build, archive and upload
      - name: CMake
        if: steps.download-prior-build.outputs.cache-hit != 'true'
        run: |
          mkdir -p build
          cd build
          cmake .. ${{ steps.cmake-flags.outputs.flags }}
          make rebuild_cache && make

      - name: "Rebuild the list of tests to match the compile flags"
        if: steps.download-prior-build.outputs.cache-hit != 'true'
        working-directory: ./build
        run: |
          ./test/testsuite
          if [[ $(diff list.txt ../test/list.txt; echo $?) != 0 ]]; then
            mv list.txt ../test/list.txt
            make rebuild_cache
          fi

      - name: "Cache the build to reuse it later"
        if: steps.download-prior-build.outputs.cache-hit != 'true' && inputs.use_cache_key
        uses: actions/cache/save@v3
        with:
          path: build
          key: ${{ inputs.use_cache_key }}

      # testing
      - name: "Test app using dynamic library does not crash if no NATS call is made"
        working-directory: ./build
        run: |
          test/dylib/nonats

      - name: "Download nats-server binary: ${{ inputs.server_version }}"
        if: inputs.quick_test != 'ON'
        working-directory: ./build
        run: |
          if [[ "${{ inputs.server_version }}" == "latest" ]]; then
            rel=$(curl -s https://api.github.com/repos/nats-io/nats-server/releases/latest | jq -r '.tag_name')
          else
            rel=${{ inputs.server_version }}
          fi
          if wget https://github.com/nats-io/nats-server/releases/download/${rel}/nats-server-${rel}-linux-amd64.tar.gz; then
            tar -xzf nats-server-${rel}-linux-amd64.tar.gz
            cp nats-server-${rel}-linux-amd64/nats-server ../deps/nats-server
          else
            curl -sf 'https://binaries.nats.dev/nats-io/nats-server/v2@${{ inputs.server_version }}' | PREFIX=. sh
            mv ./nats-server ../deps/nats-server
          fi

      - name: "Test"
        working-directory: ./build
        run: |
          export PATH=../deps/nats-server:../deps/nats-streaming-server:$PATH
          export NATS_TEST_SERVER_VERSION="$(nats-server -v)"
          if [[ "${{ inputs.quick_test }}" == "ON" ]]; then
            ctest --timeout 60 --output-on-failure -I 1,1
          else
            ctest --timeout 60 --output-on-failure
          fi

      - name: Upload coverage reports to Codecov
        if: inputs.quick_test != 'ON' && inputs.coverage == 'ON'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          gcov: true
          verbose: false # optional (default = false)
